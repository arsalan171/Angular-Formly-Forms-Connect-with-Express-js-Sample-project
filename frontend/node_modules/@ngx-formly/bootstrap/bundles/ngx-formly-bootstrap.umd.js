(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngx-formly/core'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/bootstrap', ['exports', '@angular/core', '@ngx-formly/core', '@angular/forms', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].bootstrap = {}),global.ng.core,null,global.ng.forms,global.rxjs,global.rxjs.operators,global.ng.common));
}(this, (function (exports,core,core$1,forms,rxjs,operators,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyFieldCheckbox = (function (_super) {
        __extends(FormlyFieldCheckbox, _super);
        function FormlyFieldCheckbox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldCheckbox.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-checkbox',
                        template: "\n    <label class=\"custom-control custom-checkbox\">\n      <input type=\"checkbox\" [formControl]=\"formControl\"\n        [attr.invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && model[key] === undefined\"\n        [formlyAttributes]=\"field\" class=\"custom-control-input\">\n        <span class=\"custom-control-label\">\n          {{ to.label }}\n          <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n        </span>\n        <span class=\"custom-control-indicator\"></span>\n    </label>\n  ",
                    },] },
        ];
        return FormlyFieldCheckbox;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyFieldMultiCheckbox = (function (_super) {
        __extends(FormlyFieldMultiCheckbox, _super);
        function FormlyFieldMultiCheckbox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
        FormlyFieldMultiCheckbox.createControl = /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
            function (model, field) {
                if (!(field.templateOptions.options instanceof rxjs.Observable)) {
                    var /** @type {?} */ controlGroupConfig = field.templateOptions.options.reduce(function (previous, option) {
                        previous[option.key] = new forms.FormControl(model ? model[option.key] : undefined);
                        return previous;
                    }, {});
                    return new forms.FormGroup(controlGroupConfig, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
                }
                else {
                    throw new Error("[Formly Error] You cannot pass an Observable to a multicheckbox yet.");
                }
            };
        FormlyFieldMultiCheckbox.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-multicheckbox',
                        template: "\n    <div *ngFor=\"let option of to.options; let i = index;\" class=\"checkbox\">\n      <label class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\"\n          [value]=\"option.value\"\n          [id]=\"id + '_' + i\"\n          [formControl]=\"formControl.get(option.key)\"\n          [formlyAttributes]=\"field\" class=\"custom-control-input\">\n        <span class=\"custom-control-label\">{{ option.value }}</span>\n        <span class=\"custom-control-indicator\"></span>\n      </label>\n    </div>\n  ",
                    },] },
        ];
        return FormlyFieldMultiCheckbox;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyFieldInput = (function (_super) {
        __extends(FormlyFieldInput, _super);
        function FormlyFieldInput() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FormlyFieldInput.prototype, "type", {
            get: /**
             * @return {?}
             */ function () {
                return this.to.type || 'text';
            },
            enumerable: true,
            configurable: true
        });
        FormlyFieldInput.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-input',
                        template: "\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  ",
                        host: {
                            // temporary fix until removing bootstrap 3 support.
                            '[class.d-inline-flex]': 'to.addonLeft || to.addonRight',
                            '[class.custom-file]': 'to.addonLeft || to.addonRight',
                        },
                    },] },
        ];
        return FormlyFieldInput;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyFieldRadio = (function (_super) {
        __extends(FormlyFieldRadio, _super);
        function FormlyFieldRadio() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldRadio.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-radio',
                        template: "\n    <div [formGroup]=\"form\">\n      <div *ngFor=\"let option of to.options; let i = index;\" class=\"radio\">\n        <label class=\"custom-control custom-radio\">\n          <input\n            [name]=\"id\"\n            [id]=\"id + '_' + i\"\n            type=\"radio\"\n            [value]=\"option.label ? option.value : option.key\"\n            [formControl]=\"formControl\"\n            [formlyAttributes]=\"field\" class=\"custom-control-input\">\n\n          <span class=\"custom-control-label\">{{ option.label ? option.label : option.value }}</span>\n          <span class=\"custom-control-indicator\"></span>\n        </label>\n      </div>\n    </div>\n  ",
                    },] },
        ];
        return FormlyFieldRadio;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyFieldTextArea = (function (_super) {
        __extends(FormlyFieldTextArea, _super);
        function FormlyFieldTextArea() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldTextArea.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-textarea',
                        template: "\n    <textarea [name]=\"key\" [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  ",
                    },] },
        ];
        return FormlyFieldTextArea;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyFieldSelect = (function (_super) {
        __extends(FormlyFieldSelect, _super);
        function FormlyFieldSelect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyFieldSelect.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-field-select',
                        template: "\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      [formControl]=\"formControl\"\n      [class.is-invalid]=\"showError\"\n      [multiple]=\"true\"\n      [formlyAttributes]=\"field\">\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n         <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        [formControl]=\"formControl\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" value=\"\">{{ to.placeholder }}</option>\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n          <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  ",
                    },] },
        ];
        return FormlyFieldSelect;
    }(core$1.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyWrapperFieldset = (function (_super) {
        __extends(FormlyWrapperFieldset, _super);
        function FormlyWrapperFieldset() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyWrapperFieldset.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-fieldset',
                        template: "\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <ng-template #fieldComponent></ng-template>\n    </div>\n  ",
                    },] },
        ];
        FormlyWrapperFieldset.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return FormlyWrapperFieldset;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyWrapperLabel = (function (_super) {
        __extends(FormlyWrapperLabel, _super);
        function FormlyWrapperLabel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyWrapperLabel.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-label',
                        template: "\n    <label [attr.for]=\"id\" class=\"form-control-label control-label\" *ngIf=\"to.label\">\n      {{ to.label }}\n      <ng-container *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</ng-container>\n    </label>\n    <ng-template #fieldComponent></ng-template>\n  ",
                    },] },
        ];
        FormlyWrapperLabel.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return FormlyWrapperLabel;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyWrapperDescription = (function (_super) {
        __extends(FormlyWrapperDescription, _super);
        function FormlyWrapperDescription() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormlyWrapperDescription.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-description',
                        template: "\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"to.description\">\n      <small class=\"text-muted\">{{ to.description }}</small>\n    </div>\n  ",
                    },] },
        ];
        FormlyWrapperDescription.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return FormlyWrapperDescription;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyWrapperValidationMessages = (function (_super) {
        __extends(FormlyWrapperValidationMessages, _super);
        function FormlyWrapperValidationMessages() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FormlyWrapperValidationMessages.prototype, "validationId", {
            get: /**
             * @return {?}
             */ function () {
                return this.field.id + '-message';
            },
            enumerable: true,
            configurable: true
        });
        FormlyWrapperValidationMessages.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-validation-messages',
                        template: "\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf=\"showError\">\n      <small class=\"text-danger invalid-feedback\" [style.display]=\"'block'\" role=\"alert\" [id]=\"validationId\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </small>\n    </div>\n  ",
                    },] },
        ];
        FormlyWrapperValidationMessages.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return FormlyWrapperValidationMessages;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyWrapperAddons = (function (_super) {
        __extends(FormlyWrapperAddons, _super);
        function FormlyWrapperAddons() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        FormlyWrapperAddons.prototype.addonRightClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.to["addonRight"].onClick) {
                    this.to["addonRight"].onClick(this.to, this, $event);
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FormlyWrapperAddons.prototype.addonLeftClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.to["addonLeft"].onClick) {
                    this.to["addonLeft"].onClick(this.to, this, $event);
                }
            };
        FormlyWrapperAddons.decorators = [
            { type: core.Component, args: [{
                        selector: 'formly-wrapper-addons',
                        template: "\n    <div class=\"input-group\">\n      <div class=\"input-group-addon input-group-prepend\"\n        *ngIf=\"to.addonLeft\"\n        [ngStyle]=\"{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonLeftClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonLeft.class\" *ngIf=\"to.addonLeft.class\"></i>\n        <span *ngIf=\"to.addonLeft.text\" class=\"input-group-text\">{{ to.addonLeft.text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class=\"input-group-addon input-group-append\"\n        *ngIf=\"to.addonRight\"\n        [ngStyle]=\"{cursor: to.addonRight.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonRightClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to.addonRight.class\" *ngIf=\"to.addonRight.class\"></i>\n        <span *ngIf=\"to.addonRight.text\" class=\"input-group-text\">{{ to.addonRight.text }}</span>\n      </div>\n    </div>\n  ",
                        styles: ["\n    :host ::ng-deep .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host ::ng-deep .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  "],
                    },] },
        ];
        FormlyWrapperAddons.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return FormlyWrapperAddons;
    }(core$1.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TemplateDescription = (function () {
        function TemplateDescription() {
        }
        /**
         * @param {?} fc
         * @return {?}
         */
        TemplateDescription.prototype.run = /**
         * @param {?} fc
         * @return {?}
         */
            function (fc) {
                fc.templateManipulators.postWrapper.push(function (field) {
                    if (!field.templateOptions || field.templateOptions["descriptionWrapper"] !== false) {
                        return 'description';
                    }
                });
            };
        return TemplateDescription;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TemplateValidation = (function () {
        function TemplateValidation() {
        }
        /**
         * @param {?} fc
         * @return {?}
         */
        TemplateValidation.prototype.run = /**
         * @param {?} fc
         * @return {?}
         */
            function (fc) {
                fc.templateManipulators.postWrapper.push(function (field) {
                    if (!field.templateOptions || field.templateOptions["validationWrapper"] !== false) {
                        return 'validation-message';
                    }
                });
            };
        return TemplateValidation;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TemplateAddons = (function () {
        function TemplateAddons() {
        }
        /**
         * @param {?} fc
         * @return {?}
         */
        TemplateAddons.prototype.run = /**
         * @param {?} fc
         * @return {?}
         */
            function (fc) {
                fc.templateManipulators.postWrapper.push(function (field) {
                    if (field && field.templateOptions && (field.templateOptions["addonLeft"] || field.templateOptions["addonRight"])) {
                        return 'addons';
                    }
                });
            };
        return TemplateAddons;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ FIELD_TYPE_COMPONENTS = [
        FormlyFieldInput,
        FormlyFieldCheckbox,
        FormlyFieldRadio,
        FormlyFieldSelect,
        FormlyFieldTextArea,
        FormlyFieldMultiCheckbox,
        FormlyWrapperLabel,
        FormlyWrapperDescription,
        FormlyWrapperValidationMessages,
        FormlyWrapperFieldset,
        FormlyWrapperAddons,
    ];
    var /** @type {?} */ BOOTSTRAP_FORMLY_CONFIG = {
        types: [
            {
                name: 'input',
                component: FormlyFieldInput,
                wrappers: ['fieldset', 'label'],
            },
            {
                name: 'checkbox',
                component: FormlyFieldCheckbox,
                wrappers: ['fieldset'],
                defaultOptions: {
                    templateOptions: {
                        indeterminate: true,
                    },
                },
            },
            {
                name: 'radio',
                component: FormlyFieldRadio,
                wrappers: ['fieldset', 'label'],
                defaultOptions: {
                    templateOptions: {
                        options: [],
                    },
                },
            },
            {
                name: 'select',
                component: FormlyFieldSelect,
                wrappers: ['fieldset', 'label'],
                defaultOptions: {
                    templateOptions: {
                        options: [],
                    },
                },
            },
            {
                name: 'textarea',
                component: FormlyFieldTextArea,
                wrappers: ['fieldset', 'label'],
                defaultOptions: {
                    templateOptions: {
                        cols: 1,
                        rows: 1,
                    },
                },
            },
            {
                name: 'multicheckbox',
                component: FormlyFieldMultiCheckbox,
                wrappers: ['fieldset', 'label'],
                defaultOptions: {
                    templateOptions: {
                        options: [],
                    },
                },
            },
        ],
        wrappers: [
            { name: 'label', component: FormlyWrapperLabel },
            { name: 'description', component: FormlyWrapperDescription },
            { name: 'validation-message', component: FormlyWrapperValidationMessages },
            { name: 'fieldset', component: FormlyWrapperFieldset },
            { name: 'addons', component: FormlyWrapperAddons },
        ],
        manipulators: [
            { class: TemplateDescription, method: 'run' },
            { class: TemplateValidation, method: 'run' },
            { class: TemplateAddons, method: 'run' },
        ],
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlySelectOptionsPipe = (function () {
        function FormlySelectOptionsPipe() {
        }
        /**
         * @param {?} options
         * @param {?=} field
         * @return {?}
         */
        FormlySelectOptionsPipe.prototype.transform = /**
         * @param {?} options
         * @param {?=} field
         * @return {?}
         */
            function (options, field) {
                var _this = this;
                if (!(options instanceof rxjs.Observable)) {
                    options = rxjs.of(options);
                }
                return ((options)).pipe(operators.map(function (value) { return _this.toOptions(value, field || {}); }));
            };
        /**
         * @param {?} options
         * @param {?} field
         * @return {?}
         */
        FormlySelectOptionsPipe.prototype.toOptions = /**
         * @param {?} options
         * @param {?} field
         * @return {?}
         */
            function (options, field) {
                var _this = this;
                var /** @type {?} */ gOptions = [], /** @type {?} */ groups = {}, /** @type {?} */ to = field.templateOptions || {};
                options.map(function (option) {
                    if (!_this.getGroupProp(option, to)) {
                        gOptions.push(_this.toOption(option, to));
                    }
                    else {
                        if (!groups[_this.getGroupProp(option, to)]) {
                            groups[_this.getGroupProp(option, to)] = [];
                            gOptions.push({
                                label: _this.getGroupProp(option, to),
                                group: groups[_this.getGroupProp(option, to)],
                            });
                        }
                        groups[_this.getGroupProp(option, to)].push(_this.toOption(option, to));
                    }
                });
                return gOptions;
            };
        /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
        FormlySelectOptionsPipe.prototype.toOption = /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
            function (item, to) {
                return {
                    label: this.getLabelProp(item, to),
                    value: this.getValueProp(item, to),
                };
            };
        /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
        FormlySelectOptionsPipe.prototype.getLabelProp = /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
            function (item, to) {
                if (typeof to.labelProp === 'function') {
                    return to.labelProp(item);
                }
                return item[to.labelProp || 'label'];
            };
        /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
        FormlySelectOptionsPipe.prototype.getValueProp = /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
            function (item, to) {
                if (typeof to.valueProp === 'function') {
                    return to.valueProp(item);
                }
                return item[to.valueProp || 'value'];
            };
        /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
        FormlySelectOptionsPipe.prototype.getGroupProp = /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
            function (item, to) {
                if (typeof to.groupProp === 'function') {
                    return to.groupProp(item);
                }
                return item[to.groupProp || 'group'];
            };
        FormlySelectOptionsPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'formlySelectOptions' },] },
        ];
        return FormlySelectOptionsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormlyBootstrapModule = (function () {
        function FormlyBootstrapModule() {
        }
        FormlyBootstrapModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            FIELD_TYPE_COMPONENTS,
                            FormlySelectOptionsPipe,
                        ],
                        imports: [
                            common.CommonModule,
                            forms.ReactiveFormsModule,
                            core$1.FormlyModule.forRoot(BOOTSTRAP_FORMLY_CONFIG),
                        ],
                    },] },
        ];
        return FormlyBootstrapModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.FormlyBootstrapModule = FormlyBootstrapModule;
    exports.FormlyFieldCheckbox = FormlyFieldCheckbox;
    exports.FormlyFieldMultiCheckbox = FormlyFieldMultiCheckbox;
    exports.FormlyFieldInput = FormlyFieldInput;
    exports.FormlyFieldRadio = FormlyFieldRadio;
    exports.FormlyFieldTextArea = FormlyFieldTextArea;
    exports.FormlyFieldSelect = FormlyFieldSelect;
    exports.FormlyWrapperFieldset = FormlyWrapperFieldset;
    exports.FormlyWrapperLabel = FormlyWrapperLabel;
    exports.FormlyWrapperDescription = FormlyWrapperDescription;
    exports.FormlyWrapperValidationMessages = FormlyWrapperValidationMessages;
    exports.ɵb = BOOTSTRAP_FORMLY_CONFIG;
    exports.ɵa = FIELD_TYPE_COMPONENTS;
    exports.ɵg = TemplateAddons;
    exports.ɵe = TemplateDescription;
    exports.ɵf = TemplateValidation;
    exports.ɵd = FormlySelectOptionsPipe;
    exports.ɵc = FormlyWrapperAddons;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,