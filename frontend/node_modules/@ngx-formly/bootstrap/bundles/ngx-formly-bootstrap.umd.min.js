!function(t,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/core"),require("@ngx-formly/core"),require("@angular/forms"),require("rxjs"),require("rxjs/operators"),require("@angular/common")):"function"==typeof define&&define.amd?define("@ngx-formly/bootstrap",["exports","@angular/core","@ngx-formly/core","@angular/forms","rxjs","rxjs/operators","@angular/common"],o):o((t["ngx-formly"]=t["ngx-formly"]||{},t["ngx-formly"].bootstrap={}),t.ng.core,null,t.ng.forms,t.rxjs,t.rxjs.operators,t.ng.common)}(this,function(t,e,o,n,r,l,i){"use strict";var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var e in o)o.hasOwnProperty(e)&&(t[e]=o[e])};function p(t,o){function e(){this.constructor=t}a(t,o),t.prototype=null===o?Object.create(o):(e.prototype=o.prototype,new e)}var s=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.decorators=[{type:e.Component,args:[{selector:"formly-field-checkbox",template:'\n    <label class="custom-control custom-checkbox">\n      <input type="checkbox" [formControl]="formControl"\n        [attr.invalid]="showError"\n        [indeterminate]="to.indeterminate && model[key] === undefined"\n        [formlyAttributes]="field" class="custom-control-input">\n        <span class="custom-control-label">\n          {{ to.label }}\n          <ng-container *ngIf="to.required && to.hideRequiredMarker !== true">*</ng-container>\n        </span>\n        <span class="custom-control-indicator"></span>\n    </label>\n  '}]}],o}(o.FieldType),c=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.createControl=function(e,t){if(t.templateOptions.options instanceof r.Observable)throw new Error("[Formly Error] You cannot pass an Observable to a multicheckbox yet.");var o=t.templateOptions.options.reduce(function(t,o){return t[o.key]=new n.FormControl(e?e[o.key]:undefined),t},{});return new n.FormGroup(o,t.validators?t.validators.validation:undefined,t.asyncValidators?t.asyncValidators.validation:undefined)},o.decorators=[{type:e.Component,args:[{selector:"formly-field-multicheckbox",template:'\n    <div *ngFor="let option of to.options; let i = index;" class="checkbox">\n      <label class="custom-control custom-checkbox">\n        <input type="checkbox"\n          [value]="option.value"\n          [id]="id + \'_\' + i"\n          [formControl]="formControl.get(option.key)"\n          [formlyAttributes]="field" class="custom-control-input">\n        <span class="custom-control-label">{{ option.value }}</span>\n        <span class="custom-control-indicator"></span>\n      </label>\n    </div>\n  '}]}],o}(o.FieldType),d=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),Object.defineProperty(o.prototype,"type",{get:function(){return this.to.type||"text"},enumerable:!0,configurable:!0}),o.decorators=[{type:e.Component,args:[{selector:"formly-field-input",template:'\n    <input *ngIf="type !== \'number\' else numberTmp" [type]="type" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    <ng-template #numberTmp>\n      <input type="number" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    </ng-template>\n  ',host:{"[class.d-inline-flex]":"to.addonLeft || to.addonRight","[class.custom-file]":"to.addonLeft || to.addonRight"}}]}],o}(o.FieldType),u=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.decorators=[{type:e.Component,args:[{selector:"formly-field-radio",template:'\n    <div [formGroup]="form">\n      <div *ngFor="let option of to.options; let i = index;" class="radio">\n        <label class="custom-control custom-radio">\n          <input\n            [name]="id"\n            [id]="id + \'_\' + i"\n            type="radio"\n            [value]="option.label ? option.value : option.key"\n            [formControl]="formControl"\n            [formlyAttributes]="field" class="custom-control-input">\n\n          <span class="custom-control-label">{{ option.label ? option.label : option.value }}</span>\n          <span class="custom-control-indicator"></span>\n        </label>\n      </div>\n    </div>\n  '}]}],o}(o.FieldType),f=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.decorators=[{type:e.Component,args:[{selector:"formly-field-textarea",template:'\n    <textarea [name]="key" [formControl]="formControl" [cols]="to.cols"\n      [rows]="to.rows" class="form-control" [class.is-invalid]="showError"\n      [formlyAttributes]="field">\n    </textarea>\n  '}]}],o}(o.FieldType),m=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.decorators=[{type:e.Component,args:[{selector:"formly-field-select",template:'\n    <select *ngIf="to.multiple; else singleSelect" class="form-control"\n      [formControl]="formControl"\n      [class.is-invalid]="showError"\n      [multiple]="true"\n      [formlyAttributes]="field">\n        <ng-container *ngFor="let item of to.options | formlySelectOptions:field | async">\n         <optgroup *ngIf="item.group" label="{{item.label}}">\n            <option *ngFor="let child of item.group" [value]="child.value" [disabled]="child.disabled">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf="!item.group" [value]="item.value" [disabled]="item.disabled">{{ item.label }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class="form-control"\n        [formControl]="formControl"\n        [class.is-invalid]="showError"\n        [formlyAttributes]="field">\n        <option *ngIf="to.placeholder" value="">{{ to.placeholder }}</option>\n        <ng-container *ngFor="let item of to.options | formlySelectOptions:field | async">\n          <optgroup *ngIf="item.group" label="{{item.label}}">\n            <option *ngFor="let child of item.group" [value]="child.value" [disabled]="child.disabled">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf="!item.group" [value]="item.value" [disabled]="item.disabled">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  '}]}],o}(o.FieldType),g=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.decorators=[{type:e.Component,args:[{selector:"formly-wrapper-fieldset",template:'\n    <div class="form-group" [class.has-error]="showError">\n      <ng-template #fieldComponent></ng-template>\n    </div>\n  '}]}],o.propDecorators={fieldComponent:[{type:e.ViewChild,args:["fieldComponent",{read:e.ViewContainerRef}]}]},o}(o.FieldWrapper),y=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.decorators=[{type:e.Component,args:[{selector:"formly-wrapper-label",template:'\n    <label [attr.for]="id" class="form-control-label control-label" *ngIf="to.label">\n      {{ to.label }}\n      <ng-container *ngIf="to.required && to.hideRequiredMarker !== true">*</ng-container>\n    </label>\n    <ng-template #fieldComponent></ng-template>\n  '}]}],o.propDecorators={fieldComponent:[{type:e.ViewChild,args:["fieldComponent",{read:e.ViewContainerRef}]}]},o}(o.FieldWrapper),h=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.decorators=[{type:e.Component,args:[{selector:"formly-wrapper-description",template:'\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf="to.description">\n      <small class="text-muted">{{ to.description }}</small>\n    </div>\n  '}]}],o.propDecorators={fieldComponent:[{type:e.ViewChild,args:["fieldComponent",{read:e.ViewContainerRef}]}]},o}(o.FieldWrapper),b=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),Object.defineProperty(o.prototype,"validationId",{get:function(){return this.field.id+"-message"},enumerable:!0,configurable:!0}),o.decorators=[{type:e.Component,args:[{selector:"formly-wrapper-validation-messages",template:'\n    <ng-template #fieldComponent></ng-template>\n    <div *ngIf="showError">\n      <small class="text-danger invalid-feedback" [style.display]="\'block\'" role="alert" [id]="validationId">\n        <formly-validation-message [field]="field"></formly-validation-message>\n      </small>\n    </div>\n  '}]}],o.propDecorators={fieldComponent:[{type:e.ViewChild,args:["fieldComponent",{read:e.ViewContainerRef}]}]},o}(o.FieldWrapper),v=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return p(o,t),o.prototype.addonRightClick=function(t){this.to.addonRight.onClick&&this.to.addonRight.onClick(this.to,this,t)},o.prototype.addonLeftClick=function(t){this.to.addonLeft.onClick&&this.to.addonLeft.onClick(this.to,this,t)},o.decorators=[{type:e.Component,args:[{selector:"formly-wrapper-addons",template:'\n    <div class="input-group">\n      <div class="input-group-addon input-group-prepend"\n        *ngIf="to.addonLeft"\n        [ngStyle]="{cursor: to.addonLeft.onClick ? \'pointer\' : \'inherit\'}"\n        (click)="addonLeftClick($event)">\n        <i class="input-group-text" [ngClass]="to.addonLeft.class" *ngIf="to.addonLeft.class"></i>\n        <span *ngIf="to.addonLeft.text" class="input-group-text">{{ to.addonLeft.text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class="input-group-addon input-group-append"\n        *ngIf="to.addonRight"\n        [ngStyle]="{cursor: to.addonRight.onClick ? \'pointer\' : \'inherit\'}"\n        (click)="addonRightClick($event)">\n        <i class="input-group-text" [ngClass]="to.addonRight.class" *ngIf="to.addonRight.class"></i>\n        <span *ngIf="to.addonRight.text" class="input-group-text">{{ to.addonRight.text }}</span>\n      </div>\n    </div>\n  ',styles:["\n    :host ::ng-deep .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host ::ng-deep .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  "]}]}],o.propDecorators={fieldComponent:[{type:e.ViewChild,args:["fieldComponent",{read:e.ViewContainerRef}]}]},o}(o.FieldWrapper),C=function(){function t(){}return t.prototype.run=function(t){t.templateManipulators.postWrapper.push(function(t){if(!t.templateOptions||!1!==t.templateOptions.descriptionWrapper)return"description"})},t}(),x=function(){function t(){}return t.prototype.run=function(t){t.templateManipulators.postWrapper.push(function(t){if(!t.templateOptions||!1!==t.templateOptions.validationWrapper)return"validation-message"})},t}(),F=function(){function t(){}return t.prototype.run=function(t){t.templateManipulators.postWrapper.push(function(t){if(t&&t.templateOptions&&(t.templateOptions.addonLeft||t.templateOptions.addonRight))return"addons"})},t}(),w=[d,s,u,m,f,c,y,h,b,g,v],O={types:[{name:"input",component:d,wrappers:["fieldset","label"]},{name:"checkbox",component:s,wrappers:["fieldset"],defaultOptions:{templateOptions:{indeterminate:!0}}},{name:"radio",component:u,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{options:[]}}},{name:"select",component:m,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{options:[]}}},{name:"textarea",component:f,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{cols:1,rows:1}}},{name:"multicheckbox",component:c,wrappers:["fieldset","label"],defaultOptions:{templateOptions:{options:[]}}}],wrappers:[{name:"label",component:y},{name:"description",component:h},{name:"validation-message",component:b},{name:"fieldset",component:g},{name:"addons",component:v}],manipulators:[{"class":C,method:"run"},{"class":x,method:"run"},{"class":F,method:"run"}]},k=function(){function t(){}return t.prototype.transform=function(t,o){var e=this;return t instanceof r.Observable||(t=r.of(t)),t.pipe(l.map(function(t){return e.toOptions(t,o||{})}))},t.prototype.toOptions=function(t,o){var e=this,n=[],r={},l=o.templateOptions||{};return t.map(function(t){e.getGroupProp(t,l)?(r[e.getGroupProp(t,l)]||(r[e.getGroupProp(t,l)]=[],n.push({label:e.getGroupProp(t,l),group:r[e.getGroupProp(t,l)]})),r[e.getGroupProp(t,l)].push(e.toOption(t,l))):n.push(e.toOption(t,l))}),n},t.prototype.toOption=function(t,o){return{label:this.getLabelProp(t,o),value:this.getValueProp(t,o)}},t.prototype.getLabelProp=function(t,o){return"function"==typeof o.labelProp?o.labelProp(t):t[o.labelProp||"label"]},t.prototype.getValueProp=function(t,o){return"function"==typeof o.valueProp?o.valueProp(t):t[o.valueProp||"value"]},t.prototype.getGroupProp=function(t,o){return"function"==typeof o.groupProp?o.groupProp(t):t[o.groupProp||"group"]},t.decorators=[{type:e.Pipe,args:[{name:"formlySelectOptions"}]}],t}(),P=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{declarations:[w,k],imports:[i.CommonModule,n.ReactiveFormsModule,o.FormlyModule.forRoot(O)]}]}],t}();t.FormlyBootstrapModule=P,t.FormlyFieldCheckbox=s,t.FormlyFieldMultiCheckbox=c,t.FormlyFieldInput=d,t.FormlyFieldRadio=u,t.FormlyFieldTextArea=f,t.FormlyFieldSelect=m,t.FormlyWrapperFieldset=g,t.FormlyWrapperLabel=y,t.FormlyWrapperDescription=h,t.FormlyWrapperValidationMessages=b,t.ɵb=O,t.ɵa=w,t.ɵg=F,t.ɵe=C,t.ɵf=x,t.ɵd=k,t.ɵc=v,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-bootstrap.umd.min.js.map