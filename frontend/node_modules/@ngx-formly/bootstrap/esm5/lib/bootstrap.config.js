/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { FormlyWrapperAddons } from './wrappers/addons';
import { TemplateDescription } from './run/description';
import { TemplateValidation } from './run/validation';
import { TemplateAddons } from './run/addon';
import { FormlyFieldInput, FormlyFieldCheckbox, FormlyFieldRadio, FormlyFieldSelect, FormlyFieldTextArea, FormlyFieldMultiCheckbox, } from './types/types';
import { FormlyWrapperLabel, FormlyWrapperDescription, FormlyWrapperValidationMessages, FormlyWrapperFieldset, } from './wrappers/wrappers';
export var /** @type {?} */ FIELD_TYPE_COMPONENTS = [
    FormlyFieldInput,
    FormlyFieldCheckbox,
    FormlyFieldRadio,
    FormlyFieldSelect,
    FormlyFieldTextArea,
    FormlyFieldMultiCheckbox,
    FormlyWrapperLabel,
    FormlyWrapperDescription,
    FormlyWrapperValidationMessages,
    FormlyWrapperFieldset,
    FormlyWrapperAddons,
];
export var /** @type {?} */ BOOTSTRAP_FORMLY_CONFIG = {
    types: [
        {
            name: 'input',
            component: FormlyFieldInput,
            wrappers: ['fieldset', 'label'],
        },
        {
            name: 'checkbox',
            component: FormlyFieldCheckbox,
            wrappers: ['fieldset'],
            defaultOptions: {
                templateOptions: {
                    indeterminate: true,
                },
            },
        },
        {
            name: 'radio',
            component: FormlyFieldRadio,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    options: [],
                },
            },
        },
        {
            name: 'select',
            component: FormlyFieldSelect,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    options: [],
                },
            },
        },
        {
            name: 'textarea',
            component: FormlyFieldTextArea,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    cols: 1,
                    rows: 1,
                },
            },
        },
        {
            name: 'multicheckbox',
            component: FormlyFieldMultiCheckbox,
            wrappers: ['fieldset', 'label'],
            defaultOptions: {
                templateOptions: {
                    options: [],
                },
            },
        },
    ],
    wrappers: [
        { name: 'label', component: FormlyWrapperLabel },
        { name: 'description', component: FormlyWrapperDescription },
        { name: 'validation-message', component: FormlyWrapperValidationMessages },
        { name: 'fieldset', component: FormlyWrapperFieldset },
        { name: 'addons', component: FormlyWrapperAddons },
    ],
    manipulators: [
        { class: TemplateDescription, method: 'run' },
        { class: TemplateValidation, method: 'run' },
        { class: TemplateAddons, method: 'run' },
    ],
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L2Jvb3RzdHJhcC8iLCJzb3VyY2VzIjpbImxpYi9ib290c3RyYXAuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdDLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBQ25CLGdCQUFnQixFQUNoQixpQkFBaUIsRUFDakIsbUJBQW1CLEVBQ25CLHdCQUF3QixHQUN6QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLHdCQUF3QixFQUN4QiwrQkFBK0IsRUFDL0IscUJBQXFCLEdBQ3RCLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsTUFBTSxDQUFDLHFCQUFNLHFCQUFxQixHQUFHO0lBRW5DLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsd0JBQXdCO0lBR3hCLGtCQUFrQjtJQUNsQix3QkFBd0I7SUFDeEIsK0JBQStCO0lBQy9CLHFCQUFxQjtJQUNyQixtQkFBbUI7Q0FDcEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxxQkFBTSx1QkFBdUIsR0FBaUI7SUFDbkQsS0FBSyxFQUFFO1FBQ0w7WUFDRSxJQUFJLEVBQUUsT0FBTztZQUNiLFNBQVMsRUFBRSxnQkFBZ0I7WUFDM0IsUUFBUSxFQUFFLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQztTQUNoQztRQUNEO1lBQ0UsSUFBSSxFQUFFLFVBQVU7WUFDaEIsU0FBUyxFQUFFLG1CQUFtQjtZQUM5QixRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDdEIsY0FBYyxFQUFFO2dCQUNkLGVBQWUsRUFBRTtvQkFDZixhQUFhLEVBQUUsSUFBSTtpQkFDcEI7YUFDRjtTQUNGO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsT0FBTztZQUNiLFNBQVMsRUFBRSxnQkFBZ0I7WUFDM0IsUUFBUSxFQUFFLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQztZQUMvQixjQUFjLEVBQUU7Z0JBQ2QsZUFBZSxFQUFFO29CQUNmLE9BQU8sRUFBRSxFQUFFO2lCQUNaO2FBQ0Y7U0FDRjtRQUNEO1lBQ0UsSUFBSSxFQUFFLFFBQVE7WUFDZCxTQUFTLEVBQUUsaUJBQWlCO1lBQzVCLFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUM7WUFDL0IsY0FBYyxFQUFFO2dCQUNkLGVBQWUsRUFBRTtvQkFDZixPQUFPLEVBQUUsRUFBRTtpQkFDWjthQUNGO1NBQ0Y7UUFDRDtZQUNFLElBQUksRUFBRSxVQUFVO1lBQ2hCLFNBQVMsRUFBRSxtQkFBbUI7WUFDOUIsUUFBUSxFQUFFLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQztZQUMvQixjQUFjLEVBQUU7Z0JBQ2QsZUFBZSxFQUFFO29CQUNmLElBQUksRUFBRSxDQUFDO29CQUNQLElBQUksRUFBRSxDQUFDO2lCQUNSO2FBQ0Y7U0FDRjtRQUNEO1lBQ0UsSUFBSSxFQUFFLGVBQWU7WUFDckIsU0FBUyxFQUFFLHdCQUF3QjtZQUNuQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDO1lBQy9CLGNBQWMsRUFBRTtnQkFDZCxlQUFlLEVBQUU7b0JBQ2YsT0FBTyxFQUFFLEVBQUU7aUJBQ1o7YUFDRjtTQUNGO0tBQ0Y7SUFDRCxRQUFRLEVBQUU7UUFDUixFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFDO1FBQzlDLEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsd0JBQXdCLEVBQUM7UUFDMUQsRUFBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLCtCQUErQixFQUFDO1FBQ3hFLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUscUJBQXFCLEVBQUM7UUFDcEQsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBQztLQUNqRDtJQUNELFlBQVksRUFBRTtRQUNaLEVBQUMsS0FBSyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUM7UUFDM0MsRUFBQyxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQztRQUMxQyxFQUFDLEtBQUssRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQztLQUN2QztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25maWdPcHRpb24gfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IEZvcm1seVdyYXBwZXJBZGRvbnMgfSBmcm9tICcuL3dyYXBwZXJzL2FkZG9ucyc7XG5pbXBvcnQgeyBUZW1wbGF0ZURlc2NyaXB0aW9uIH0gZnJvbSAnLi9ydW4vZGVzY3JpcHRpb24nO1xuaW1wb3J0IHsgVGVtcGxhdGVWYWxpZGF0aW9uIH0gZnJvbSAnLi9ydW4vdmFsaWRhdGlvbic7XG5pbXBvcnQgeyBUZW1wbGF0ZUFkZG9ucyB9IGZyb20gJy4vcnVuL2FkZG9uJztcbmltcG9ydCB7XG4gIEZvcm1seUZpZWxkSW5wdXQsXG4gIEZvcm1seUZpZWxkQ2hlY2tib3gsXG4gIEZvcm1seUZpZWxkUmFkaW8sXG4gIEZvcm1seUZpZWxkU2VsZWN0LFxuICBGb3JtbHlGaWVsZFRleHRBcmVhLFxuICBGb3JtbHlGaWVsZE11bHRpQ2hlY2tib3gsXG59IGZyb20gJy4vdHlwZXMvdHlwZXMnO1xuaW1wb3J0IHtcbiAgRm9ybWx5V3JhcHBlckxhYmVsLFxuICBGb3JtbHlXcmFwcGVyRGVzY3JpcHRpb24sXG4gIEZvcm1seVdyYXBwZXJWYWxpZGF0aW9uTWVzc2FnZXMsXG4gIEZvcm1seVdyYXBwZXJGaWVsZHNldCxcbn0gZnJvbSAnLi93cmFwcGVycy93cmFwcGVycyc7XG5cbmV4cG9ydCBjb25zdCBGSUVMRF9UWVBFX0NPTVBPTkVOVFMgPSBbXG4gIC8vIHR5cGVzXG4gIEZvcm1seUZpZWxkSW5wdXQsXG4gIEZvcm1seUZpZWxkQ2hlY2tib3gsXG4gIEZvcm1seUZpZWxkUmFkaW8sXG4gIEZvcm1seUZpZWxkU2VsZWN0LFxuICBGb3JtbHlGaWVsZFRleHRBcmVhLFxuICBGb3JtbHlGaWVsZE11bHRpQ2hlY2tib3gsXG5cbiAgLy8gd3JhcHBlcnNcbiAgRm9ybWx5V3JhcHBlckxhYmVsLFxuICBGb3JtbHlXcmFwcGVyRGVzY3JpcHRpb24sXG4gIEZvcm1seVdyYXBwZXJWYWxpZGF0aW9uTWVzc2FnZXMsXG4gIEZvcm1seVdyYXBwZXJGaWVsZHNldCxcbiAgRm9ybWx5V3JhcHBlckFkZG9ucyxcbl07XG5cbmV4cG9ydCBjb25zdCBCT09UU1RSQVBfRk9STUxZX0NPTkZJRzogQ29uZmlnT3B0aW9uID0ge1xuICB0eXBlczogW1xuICAgIHtcbiAgICAgIG5hbWU6ICdpbnB1dCcsXG4gICAgICBjb21wb25lbnQ6IEZvcm1seUZpZWxkSW5wdXQsXG4gICAgICB3cmFwcGVyczogWydmaWVsZHNldCcsICdsYWJlbCddLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ2NoZWNrYm94JyxcbiAgICAgIGNvbXBvbmVudDogRm9ybWx5RmllbGRDaGVja2JveCxcbiAgICAgIHdyYXBwZXJzOiBbJ2ZpZWxkc2V0J10sXG4gICAgICBkZWZhdWx0T3B0aW9uczoge1xuICAgICAgICB0ZW1wbGF0ZU9wdGlvbnM6IHtcbiAgICAgICAgICBpbmRldGVybWluYXRlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdyYWRpbycsXG4gICAgICBjb21wb25lbnQ6IEZvcm1seUZpZWxkUmFkaW8sXG4gICAgICB3cmFwcGVyczogWydmaWVsZHNldCcsICdsYWJlbCddLFxuICAgICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgICAgb3B0aW9uczogW10sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICBjb21wb25lbnQ6IEZvcm1seUZpZWxkU2VsZWN0LFxuICAgICAgd3JhcHBlcnM6IFsnZmllbGRzZXQnLCAnbGFiZWwnXSxcbiAgICAgIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICd0ZXh0YXJlYScsXG4gICAgICBjb21wb25lbnQ6IEZvcm1seUZpZWxkVGV4dEFyZWEsXG4gICAgICB3cmFwcGVyczogWydmaWVsZHNldCcsICdsYWJlbCddLFxuICAgICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgICAgY29sczogMSxcbiAgICAgICAgICByb3dzOiAxLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdtdWx0aWNoZWNrYm94JyxcbiAgICAgIGNvbXBvbmVudDogRm9ybWx5RmllbGRNdWx0aUNoZWNrYm94LFxuICAgICAgd3JhcHBlcnM6IFsnZmllbGRzZXQnLCAnbGFiZWwnXSxcbiAgICAgIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICBdLFxuICB3cmFwcGVyczogW1xuICAgIHtuYW1lOiAnbGFiZWwnLCBjb21wb25lbnQ6IEZvcm1seVdyYXBwZXJMYWJlbH0sXG4gICAge25hbWU6ICdkZXNjcmlwdGlvbicsIGNvbXBvbmVudDogRm9ybWx5V3JhcHBlckRlc2NyaXB0aW9ufSxcbiAgICB7bmFtZTogJ3ZhbGlkYXRpb24tbWVzc2FnZScsIGNvbXBvbmVudDogRm9ybWx5V3JhcHBlclZhbGlkYXRpb25NZXNzYWdlc30sXG4gICAge25hbWU6ICdmaWVsZHNldCcsIGNvbXBvbmVudDogRm9ybWx5V3JhcHBlckZpZWxkc2V0fSxcbiAgICB7bmFtZTogJ2FkZG9ucycsIGNvbXBvbmVudDogRm9ybWx5V3JhcHBlckFkZG9uc30sXG4gIF0sXG4gIG1hbmlwdWxhdG9yczogW1xuICAgIHtjbGFzczogVGVtcGxhdGVEZXNjcmlwdGlvbiwgbWV0aG9kOiAncnVuJ30sXG4gICAge2NsYXNzOiBUZW1wbGF0ZVZhbGlkYXRpb24sIG1ldGhvZDogJ3J1bid9LFxuICAgIHtjbGFzczogVGVtcGxhdGVBZGRvbnMsIG1ldGhvZDogJ3J1bid9LFxuICBdLFxufTtcbiJdfQ==