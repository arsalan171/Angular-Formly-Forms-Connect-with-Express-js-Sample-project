/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { FieldType } from '@ngx-formly/core';
import { Observable } from 'rxjs';
var FormlyFieldMultiCheckbox = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyFieldMultiCheckbox, _super);
    function FormlyFieldMultiCheckbox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    FormlyFieldMultiCheckbox.createControl = /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    function (model, field) {
        if (!(field.templateOptions.options instanceof Observable)) {
            var /** @type {?} */ controlGroupConfig = field.templateOptions.options.reduce(function (previous, option) {
                previous[option.key] = new FormControl(model ? model[option.key] : undefined);
                return previous;
            }, {});
            return new FormGroup(controlGroupConfig, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
        }
        else {
            throw new Error("[Formly Error] You cannot pass an Observable to a multicheckbox yet.");
        }
    };
    FormlyFieldMultiCheckbox.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-multicheckbox',
                    template: "\n    <div *ngFor=\"let option of to.options; let i = index;\" class=\"checkbox\">\n      <label class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\"\n          [value]=\"option.value\"\n          [id]=\"id + '_' + i\"\n          [formControl]=\"formControl.get(option.key)\"\n          [formlyAttributes]=\"field\" class=\"custom-control-input\">\n        <span class=\"custom-control-label\">{{ option.value }}</span>\n        <span class=\"custom-control-indicator\"></span>\n      </label>\n    </div>\n  ",
                },] },
    ];
    return FormlyFieldMultiCheckbox;
}(FieldType));
export { FormlyFieldMultiCheckbox };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGljaGVja2JveC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L2Jvb3RzdHJhcC8iLCJzb3VyY2VzIjpbImxpYi90eXBlcy9tdWx0aWNoZWNrYm94LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBbUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFxQixNQUFNLGtCQUFrQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBa0JZLG9EQUFTOzs7Ozs7Ozs7SUFDOUMsc0NBQWE7Ozs7O0lBQXBCLFVBQXFCLEtBQVUsRUFBRSxLQUF3QjtRQUN2RCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELHFCQUFJLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLFFBQVEsRUFBRSxNQUFNO2dCQUM3RSxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzlFLE1BQU0sQ0FBQyxRQUFRLENBQUM7YUFDakIsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUVQLE1BQU0sQ0FBQyxJQUFJLFNBQVMsQ0FDbEIsa0JBQWtCLEVBQ2xCLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQzFELEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQ3JFLENBQUM7U0FDSDtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ3pGO0tBQ0Y7O2dCQWhDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtvQkFDdEMsUUFBUSxFQUFFLHNoQkFZVDtpQkFDRjs7bUNBcEJEO0VBcUI4QyxTQUFTO1NBQTFDLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRmllbGRUeXBlLCBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktZmllbGQtbXVsdGljaGVja2JveCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIHRvLm9wdGlvbnM7IGxldCBpID0gaW5kZXg7XCIgY2xhc3M9XCJjaGVja2JveFwiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLWNoZWNrYm94XCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgIFt2YWx1ZV09XCJvcHRpb24udmFsdWVcIlxuICAgICAgICAgIFtpZF09XCJpZCArICdfJyArIGlcIlxuICAgICAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbC5nZXQob3B0aW9uLmtleSlcIlxuICAgICAgICAgIFtmb3JtbHlBdHRyaWJ1dGVzXT1cImZpZWxkXCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCI+e3sgb3B0aW9uLnZhbHVlIH19PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWluZGljYXRvclwiPjwvc3Bhbj5cbiAgICAgIDwvbGFiZWw+XG4gICAgPC9kaXY+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUZpZWxkTXVsdGlDaGVja2JveCBleHRlbmRzIEZpZWxkVHlwZSB7XG4gIHN0YXRpYyBjcmVhdGVDb250cm9sKG1vZGVsOiBhbnksIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZyk6IEFic3RyYWN0Q29udHJvbCB7XG4gICAgaWYgKCEoZmllbGQudGVtcGxhdGVPcHRpb25zLm9wdGlvbnMgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSkge1xuICAgICAgbGV0IGNvbnRyb2xHcm91cENvbmZpZyA9IGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5vcHRpb25zLnJlZHVjZSgocHJldmlvdXMsIG9wdGlvbikgPT4ge1xuICAgICAgICBwcmV2aW91c1tvcHRpb24ua2V5XSA9IG5ldyBGb3JtQ29udHJvbChtb2RlbCA/IG1vZGVsW29wdGlvbi5rZXldIDogdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzO1xuICAgICAgfSwge30pO1xuXG4gICAgICByZXR1cm4gbmV3IEZvcm1Hcm91cChcbiAgICAgICAgY29udHJvbEdyb3VwQ29uZmlnLFxuICAgICAgICBmaWVsZC52YWxpZGF0b3JzID8gZmllbGQudmFsaWRhdG9ycy52YWxpZGF0aW9uIDogdW5kZWZpbmVkLFxuICAgICAgICBmaWVsZC5hc3luY1ZhbGlkYXRvcnMgPyBmaWVsZC5hc3luY1ZhbGlkYXRvcnMudmFsaWRhdGlvbiA6IHVuZGVmaW5lZCxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgW0Zvcm1seSBFcnJvcl0gWW91IGNhbm5vdCBwYXNzIGFuIE9ic2VydmFibGUgdG8gYSBtdWx0aWNoZWNrYm94IHlldC5gKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==