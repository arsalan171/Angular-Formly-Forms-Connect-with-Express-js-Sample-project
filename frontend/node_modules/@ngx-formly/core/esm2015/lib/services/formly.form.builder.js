/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FormGroup, FormArray, FormControl, AbstractControl, Validators } from '@angular/forms';
import { FormlyConfig } from './formly.config';
import { FORMLY_VALIDATORS, evalStringExpression, evalExpressionValueSetter, getFieldId, isObject, isNullOrUndefined, clone, assignModelToFields } from './../utils';
import { getKeyPath, isFunction } from '../utils';
import { FormlyFormExpression } from './formly.form.expression';
export class FormlyFormBuilder {
    /**
     * @param {?} formlyConfig
     * @param {?} formlyFormExpression
     */
    constructor(formlyConfig, formlyFormExpression) {
        this.formlyConfig = formlyConfig;
        this.formlyFormExpression = formlyFormExpression;
        this.formId = 0;
    }
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    buildForm(form, fields = [], model, options) {
        let /** @type {?} */ fieldTransforms = (options && options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
        if (!Array.isArray(fieldTransforms)) {
            fieldTransforms = [fieldTransforms];
        }
        fieldTransforms.forEach(fieldTransform => {
            if (fieldTransform) {
                fields = fieldTransform(fields, model, form, options);
                if (!fields) {
                    throw new Error('fieldTransform must return an array of fields');
                }
            }
        });
        assignModelToFields(fields, model);
        this._buildForm(form, fields, options);
        this.formlyFormExpression.checkFields(form, fields, model, options);
    }
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} options
     * @return {?}
     */
    _buildForm(form, fields = [], options) {
        this.formId++;
        this.registerFormControls(form, fields, options);
    }
    /**
     * @param {?} form
     * @param {?} fields
     * @param {?} options
     * @return {?}
     */
    registerFormControls(form, fields, options) {
        fields.forEach((field, index) => {
            field.id = getFieldId(`formly_${this.formId}`, field, index);
            this.initFieldOptions(field);
            this.initFieldExpression(field, options);
            this.initFieldValidation(field);
            this.initFieldWrappers(field);
            this.initFieldAsyncValidation(field);
            if (field.key && field.type) {
                const /** @type {?} */ paths = getKeyPath({ key: field.key });
                let /** @type {?} */ rootForm = form, /** @type {?} */ rootModel = field.model;
                paths.forEach((path, index) => {
                    // FormGroup/FormArray only allow string value for path
                    const /** @type {?} */ formPath = path.toString();
                    // is last item
                    if (index === paths.length - 1) {
                        this.addFormControl(rootForm, field, rootModel, formPath);
                        if (field.fieldArray) {
                            field.fieldGroup = [];
                            field.model.forEach((m, i) => field.fieldGroup.push(Object.assign({}, clone(field.fieldArray), { key: `${i}` })));
                            assignModelToFields(field.fieldGroup, rootModel);
                        }
                    }
                    else {
                        let /** @type {?} */ nestedForm = /** @type {?} */ (rootForm.get(formPath));
                        if (!nestedForm) {
                            nestedForm = new FormGroup({});
                            this.addControl(rootForm, formPath, nestedForm);
                        }
                        if (!rootModel[path]) {
                            rootModel[path] = typeof path === 'string' ? {} : [];
                        }
                        rootForm = nestedForm;
                        rootModel = rootModel[path];
                    }
                });
            }
            if (field.fieldGroup) {
                if (!field.type) {
                    field.type = 'formly-group';
                }
                // if `hideExpression` is set in that case we have to deal
                // with toggle FormControl for each field in fieldGroup separately
                if (field.hideExpression) {
                    field.fieldGroup.forEach(f => {
                        let /** @type {?} */ hideExpression = f.hideExpression || (() => false);
                        if (typeof hideExpression === 'string') {
                            hideExpression = evalStringExpression(hideExpression, ['model', 'formState']);
                        }
                        f.hideExpression = (model, formState) => field.hide || hideExpression(model, formState);
                    });
                }
                if (field.key) {
                    this.addFormControl(form, field, { [field.key]: field.fieldArray ? [] : {} }, field.key);
                    this._buildForm(/** @type {?} */ (field.formControl), field.fieldGroup, options);
                }
                else {
                    this._buildForm(form, field.fieldGroup, options);
                }
            }
        });
    }
    /**
     * @param {?} field
     * @param {?} options
     * @return {?}
     */
    initFieldExpression(field, options) {
        if (field.expressionProperties) {
            for (const /** @type {?} */ key in /** @type {?} */ (field.expressionProperties)) {
                if (typeof field.expressionProperties[key] === 'string' || isFunction(field.expressionProperties[key])) {
                    // cache built expression
                    field.expressionProperties[key] = {
                        expression: isFunction(field.expressionProperties[key]) ? field.expressionProperties[key] : evalStringExpression(field.expressionProperties[key], ['model', 'formState']),
                        expressionValueSetter: evalExpressionValueSetter(`field.${key}`, ['expressionValue', 'model', 'field']),
                    };
                }
            }
        }
        if (field.hideExpression) {
            // delete hide value in order to force re-evaluate it in FormlyFormExpression.
            delete field.hide;
            if (typeof field.hideExpression === 'string') {
                // cache built expression
                field.hideExpression = evalStringExpression(field.hideExpression, ['model', 'formState']);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldOptions(field) {
        field.templateOptions = field.templateOptions || {};
        if (field.type) {
            this.formlyConfig.getMergedField(field);
            if (field.key) {
                field.templateOptions = Object.assign({
                    label: '',
                    placeholder: '',
                    focus: false,
                }, field.templateOptions);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldAsyncValidation(field) {
        const /** @type {?} */ validators = [];
        if (field.asyncValidators) {
            for (const /** @type {?} */ validatorName in field.asyncValidators) {
                if (validatorName !== 'validation') {
                    let /** @type {?} */ validator = field.asyncValidators[validatorName];
                    if (isObject(validator)) {
                        validator = validator.expression;
                    }
                    validators.push((control) => new Promise((resolve) => {
                        return validator(control, field).then((result) => {
                            resolve(result ? null : { [validatorName]: true });
                        });
                    }));
                }
            }
        }
        if (field.asyncValidators && Array.isArray(field.asyncValidators.validation)) {
            field.asyncValidators.validation
                .forEach((validator) => validators.push(this.wrapNgValidatorFn(field, validator)));
        }
        if (validators.length) {
            if (field.asyncValidators && !Array.isArray(field.asyncValidators.validation)) {
                field.asyncValidators.validation = Validators.composeAsync([field.asyncValidators.validation, ...validators]);
            }
            else {
                field.asyncValidators = {
                    validation: Validators.composeAsync(validators),
                };
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldValidation(field) {
        const /** @type {?} */ validators = [];
        FORMLY_VALIDATORS
            .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt))
            || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))
            .forEach((opt) => {
            validators.push((control) => {
                if (field.templateOptions[opt] === false) {
                    return null;
                }
                return this.getValidation(opt, field.templateOptions[opt])(control);
            });
        });
        if (field.validators) {
            for (const /** @type {?} */ validatorName in field.validators) {
                if (validatorName !== 'validation') {
                    let /** @type {?} */ validator = field.validators[validatorName];
                    let /** @type {?} */ errorPath;
                    let /** @type {?} */ message;
                    if (isObject(validator)) {
                        errorPath = validator.errorPath;
                        message = validator.message;
                        validator = validator.expression;
                    }
                    validators.push((control) => {
                        const /** @type {?} */ isValid = validator(control, field);
                        if (errorPath && field.formControl && field.formControl.get(errorPath)) {
                            if (!isValid) {
                                field.formControl.get(errorPath).setErrors(Object.assign({}, (field.formControl.get(errorPath).errors || {}), { [validatorName]: { message } }));
                            }
                            else {
                                const /** @type {?} */ errors = (field.formControl.get(errorPath).errors || {});
                                delete errors[validatorName];
                                field.formControl.get(errorPath).setErrors(Object.keys(errors).length === 0 ? null : errors);
                            }
                        }
                        return isValid ? null : { [validatorName]: errorPath ? { errorPath } : true };
                    });
                }
            }
        }
        if (field.validators && Array.isArray(field.validators.validation)) {
            field.validators.validation
                .forEach((validator) => validators.push(this.wrapNgValidatorFn(field, validator)));
        }
        if (validators.length) {
            if (field.validators && !Array.isArray(field.validators.validation)) {
                field.validators.validation = Validators.compose([field.validators.validation, ...validators]);
            }
            else {
                field.validators = {
                    validation: Validators.compose(validators),
                };
            }
        }
    }
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    addFormControl(form, field, model, path) {
        let /** @type {?} */ control;
        const /** @type {?} */ validators = field.validators ? field.validators.validation : undefined, /** @type {?} */
        asyncValidators = field.asyncValidators ? field.asyncValidators.validation : undefined, /** @type {?} */
        updateOn = field.modelOptions && field.modelOptions.updateOn ?
            field.modelOptions.updateOn : undefined;
        const /** @type {?} */ abstractControlOptions = /** @type {?} */ ({
            validators,
            asyncValidators,
            updateOn,
        });
        if (field.formControl instanceof AbstractControl || form.get(path)) {
            control = field.formControl || form.get(path);
            if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                && control.value !== model[path]
                && control instanceof FormControl) {
                control.patchValue(model[path]);
            }
        }
        else if (field.component && field.component.createControl) {
            control = field.component.createControl(model[path], field);
        }
        else if (field.fieldGroup && field.key && field.key === path && !field.fieldArray) {
            control = new FormGroup(model[path], abstractControlOptions);
        }
        else if (field.fieldArray && field.key && field.key === path) {
            control = new FormArray([], abstractControlOptions);
        }
        else {
            control = new FormControl(model[path], abstractControlOptions);
        }
        if (field.templateOptions.disabled) {
            control.disable();
        }
        // Replace decorated property with a getter that returns the observable.
        // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
        if (delete field.templateOptions.disabled) {
            Object.defineProperty(field.templateOptions, 'disabled', {
                get: (function () { return !this.formControl.enabled; }).bind(field),
                set: (function (value) {
                    if (this.expressionProperties && this.expressionProperties.hasOwnProperty('templateOptions.disabled')) {
                        this.expressionProperties['templateOptions.disabled'].expressionValue = value;
                    }
                    value ? this.formControl.disable() : this.formControl.enable();
                }).bind(field),
                enumerable: true,
                configurable: true,
            });
        }
        this.addControl(form, path, control, field);
    }
    /**
     * @param {?} form
     * @param {?} key
     * @param {?} formControl
     * @param {?=} field
     * @return {?}
     */
    addControl(form, key, formControl, field) {
        if (field) {
            field.formControl = formControl;
        }
        if (form instanceof FormArray) {
            if (form.at(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
        else {
            if (form.get(/** @type {?} */ (key)) !== formControl) {
                form.setControl(/** @type {?} */ (key), formControl);
            }
        }
    }
    /**
     * @param {?} opt
     * @param {?} value
     * @return {?}
     */
    getValidation(opt, value) {
        switch (opt) {
            case 'required':
                return Validators.required;
            case 'pattern':
                return Validators.pattern(value);
            case 'minLength':
                return Validators.minLength(value);
            case 'maxLength':
                return Validators.maxLength(value);
            case 'min':
                return Validators.min(value);
            case 'max':
                return Validators.max(value);
        }
    }
    /**
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    wrapNgValidatorFn(field, validator) {
        validator = typeof validator === 'string'
            ? this.formlyConfig.getValidator(validator).validation
            : validator;
        return (control) => (/** @type {?} */ (validator))(control, field);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldWrappers(field) {
        const /** @type {?} */ templateManipulators = {
            preWrapper: [],
            postWrapper: [],
        };
        if (field.templateOptions) {
            this.mergeTemplateManipulators(templateManipulators, field.templateOptions.templateManipulators);
        }
        this.mergeTemplateManipulators(templateManipulators, this.formlyConfig.templateManipulators);
        if (!field.wrappers) {
            field.wrappers = [];
        }
        const /** @type {?} */ preWrappers = templateManipulators.preWrapper
            .map(m => m(field))
            .filter(wrapper => wrapper && field.wrappers.indexOf(wrapper) === -1);
        const /** @type {?} */ postWrappers = templateManipulators.postWrapper
            .map(m => m(field))
            .filter(wrapper => wrapper && field.wrappers.indexOf(wrapper) === -1);
        field.wrappers = [...preWrappers, ...field.wrappers, ...postWrappers];
    }
    /**
     * @param {?} source
     * @param {?} target
     * @return {?}
     */
    mergeTemplateManipulators(source, target) {
        target = target || {};
        if (target.preWrapper) {
            source.preWrapper = source.preWrapper.concat(target.preWrapper);
        }
        if (target.postWrapper) {
            source.postWrapper = source.postWrapper.concat(target.postWrapper);
        }
        return source;
    }
}
FormlyFormBuilder.decorators = [
    { type: Injectable },
];
/** @nocollapse */
FormlyFormBuilder.ctorParameters = () => [
    { type: FormlyConfig },
    { type: FormlyFormExpression }
];
function FormlyFormBuilder_tsickle_Closure_declarations() {
    /** @type {?} */
    FormlyFormBuilder.prototype.formId;
    /** @type {?} */
    FormlyFormBuilder.prototype.formlyConfig;
    /** @type {?} */
    FormlyFormBuilder.prototype.formlyFormExpression;
}

//# sourceMappingURL=data:application/json;base64,